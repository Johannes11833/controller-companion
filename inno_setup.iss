; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!
#include "environment.iss"

#define MyAppName "Controller Companion"
#define MyAppNameCLI MyAppName + " CLI"
#define MyAppPublisher "Johannes Gundlach"
#define MyAppURL "https://github.com/Johannes11833/controller-companion"
#define MyAppExeName "controller-companion.exe"
#define MyAppExeNameCLI "controller-companion-cli.exe"
#define Path "dist\controller-companion"
#define OutputName "controller-companion-v" + AppVersion + "-windows-setup"

[Setup]
; NOTE: The value of AppId uniquely identifies this application. Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
ChangesEnvironment=true
AppId={{1190738F-DD33-4657-A8E9-FB663B152A71}
AppName={#MyAppName}
AppVersion={#AppVersion}
;AppVerName={#MyAppName} MyAppVersion
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
DefaultDirName={autopf}\Controller Companion
; "ArchitecturesAllowed=x64compatible" specifies that Setup cannot run
; on anything but x64 and Windows 11 on Arm.
ArchitecturesAllowed=x64compatible
; "ArchitecturesInstallIn64BitMode=x64compatible" requests that the
; install be done in "64-bit mode" on x64 or Windows 11 on Arm,
; meaning it should use the native 64-bit Program Files directory and
; the 64-bit view of the registry.
ArchitecturesInstallIn64BitMode=x64compatible
DisableProgramGroupPage=yes
; Uncomment the following line to run in non administrative install mode (install for current user only.)
;PrivilegesRequired=lowest
OutputBaseFilename={#OutputName}
OutputDir=dist
Compression=lzma
SolidCompression=yes
WizardStyle=modern

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"

[Code]
procedure CurStepChanged(CurStep: TSetupStep);
begin
    if (CurStep = ssPostInstall) and IsTaskSelected('envPath')
     then EnvAddPath(ExpandConstant('{app}'));
end;

procedure CurUninstallStepChanged(CurUninstallStep: TUninstallStep);
begin
    if CurUninstallStep = usPostUninstall
    then EnvRemovePath(ExpandConstant('{app}'));
end;

[Tasks]
Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked
Name: "envPath"; Description: "Add to PATH variable" 

[Files]
Source: "{#Path}\{#MyAppExeName}"; DestDir: "{app}"; Flags: ignoreversion
Source: "{#Path}\{#MyAppExeNameCLI}"; DestDir: "{app}"; Flags: ignoreversion
Source: "{#Path}\*"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs createallsubdirs
; NOTE: Don't use "Flags: ignoreversion" on any shared system files

[Icons]
Name: "{autoprograms}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"
Name: "{autoprograms}\{#MyAppNameCLI}"; Filename: "{app}\{#MyAppExeNameCLI}"
Name: "{autodesktop}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"; Tasks: desktopicon

[InstallDelete]
; .dist-info folders contain a version name and thus need to be removed when updating (fixes old version name shown in about dialog)
Type: filesandordirs; Name: {app}\_internal\*.dist-info

[Run]
Filename: "{app}\{#MyAppExeName}"; Description: "{cm:LaunchProgram,{#StringChange(MyAppName, '&', '&&')}}"; Flags: nowait postinstall skipifsilent